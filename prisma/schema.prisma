generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Post {
  id            String   @id @default(cuid())
  title         String?  @db.Text
  subtitle      String   @db.Text
  description   String?  @db.Text
  content       String?  @db.LongText
  slug          String   @default(uuid())
  image         String?  @db.Text
  imageBlurhash String?  @db.LongText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  siteId        String?
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?

  @@unique([id, siteId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  gh_username   String?
  email         String?   @unique
  password      String?
  image         String?
  role          String?   @default("user")
  phone         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Session       Session[]
  Account       Account[]
  posts         Post[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model b8e88ba2_0a4a_57c6_9def_cd4f22e774f8_20221010010850_vrepl {
  id            String    @id
  name          String?
  username      String?
  gh_username   String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  password      String?
  role          String?   @default("user")

  @@map("_b8e88ba2_0a4a_57c6_9def_cd4f22e774f8_20221010010850_vrepl")
}
